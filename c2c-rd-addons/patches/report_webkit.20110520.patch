=== modified file 'report_webkit/report_helper.py'
--- report_webkit/report_helper.py	2011-03-14 17:14:29 +0000
+++ report_webkit/report_helper.py	2011-05-20 21:30:58 +0000
@@ -77,6 +77,27 @@
             
     def embed_logo_by_name(self, name, width=0, height=0) :
         """Return HTML embedded logo by name"""
-        img, type = self.get_logo_by_name(name)
-        return self.embed_image(type, img, width, height)
-        
\ No newline at end of file
+        try: 
+            img, type = self.get_logo_by_name(name)
+            return self.embed_image(type, img, width, height)
+        except:
+            return
+        
+class chapter_server :
+
+    @classmethod
+    def __init__(self):
+        self.stack = [0]
+
+    @classmethod
+    def get_structure(self, level):
+        import sys
+        while len (self.stack) < level:
+            self.stack.append(0)
+        while len (self.stack) > level:
+            self.stack = self.stack[:level]
+        try:
+            self.stack[len (self.stack)-1] += 1
+        except:
+            print >> sys.stderr,'stack',self.stack
+        return ".".join("%s" % s for s in self.stack) + "."

=== modified file 'report_webkit/webkit_report.py'
--- report_webkit/webkit_report.py	2011-04-30 01:56:46 +0000
+++ report_webkit/webkit_report.py	2011-05-20 20:41:44 +0000
@@ -40,6 +40,7 @@
 import netsvc
 import pooler
 from report_helper import WebKitHelper
+from report_helper import chapter_server
 from report.report_sxw import *
 import addons
 import tools
@@ -294,10 +295,12 @@
         #default_filters=['unicode', 'entity'] can be used to set global filter
         body_mako_tpl = mako_template(template)
         helper = WebKitHelper(cursor, uid, report_xml.id, context)
+        chapter = chapter_server()
         try :
             html = body_mako_tpl.render(     helper=helper,
                                              css=css,
                                              _=self.translate_call,
+                                             chapter = chapter,
                                              **self.parser_instance.localcontext
                                         )
         except Exception, e:

